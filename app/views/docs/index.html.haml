%h2= t('.title')

.note
  These notes provide a brief overview of RGovData structure and usage.
  You can see some of this in action by using the
  = link_to t('realms.index.short_title'), realms_url
  since it includes code snippets along the way.

%h3= t('dashboards.show.resources.title')
%ul
  %li= link_to t('rgovdata.gem_source'), AppConstants.github_url
  %li= link_to t('rgovdata.site_source'), AppConstants.site_github_url
  %li= link_to t('rgovdata.rdoc_info'), AppConstants.rdoc_url

%h3 Configuration
%p
  Some services require authentication or other settings to work.
  By convention, RGovData looks for configuration details in the following manner:
%ul
  %li
    If an environment variable exists for the setting (e.g. rgovdata_username) then
    this will take precedence over any details read from a conf file.
  %li
    If you are running in a Rails environment, it will read
    from Rails.root/config/rgovdata.conf
    (this file is not installed automatically - if you need it, you must add
    it to your Rails project yourself)
  %li
    Finally it will look for rgovdata.conf in the current directory. This mainly applies for
    command-line and ruby script usage.

%p
  When you run the command-line tool for the first time (rgd), it will create an
  rgovdata.conf template in the current directory if one does not already exist.

%p
  If you want to manage configuration programmatically, see the RGovData::Config
  class documentation for hints.

%h3 Overview of Key Classes

%dl.attributes.classes
  %dt RGovData::Catalog
  %dd Provides the main entry point for dataset discovery an instantiation
  %dt RGovData::ServiceListing
  %dd Represents an entry in the Catalog
  %dt RGovData::Service
  %dd The generic service endpoint and service factory
  %dt RGovData::DataSet
  %dd The generic dataset representation

%h3 DataSet Discovery / Traversing the Catalog
%p
  The following illustrates the essential process of traversing the RGovData
  catalog (directory):
%pre.code
  %code
    = preserve do
      :escaped
        # This gets the root catalog
        root_catalog = RGovData::Catalog.new(nil)

        puts "The root catalog has a collection of realms: \#{root_catalog.records}"
        # => root_catalog.realms is an alias for root_catalog.records at this level

        # Take the first realm catalog
        catalog = root_catalog.records.first

        puts "The first catalog is: \#{catalog}"
        puts "And it contains the following service listings: \#{catalog.records}"
        # => catalog.services is an alias for catalog.records at this level

        # Take the first service listing
        service_listing = catalog.records.first

        puts "The first service_listing is: \#{service_listing}"
        puts "=> it represents the underlying service: \#{service_listing.service}"

        puts "=> it has the following datasets: \#{service_listing.records}"
        # => service_listing.datasets is an alias for service_listing.records at this level

        # Take the first dataset
        dataset = service_listing.records.first

        puts "The first dataset is: \#{dataset}"
        puts "=> it has the following attributes: \#{dataset.attributes}"
        puts "=> it has the following number records: \#{dataset.records.count}"

%h3 Direct Request of a Specific Catalog Entry
%p
  RGovData::Catalog.get(key) provides a simple way of requesting any item in the
  catalog, where +key+ is the corresponding id of the item requested.
%pre.code
  %code
    = preserve do
      :escaped
        # get the RGovData::Catalog for realm=:sg
        RGovData::Catalog.get('//sg')
        # get the RGovData::ServiceListing for the NLB service in SG
        RGovData::Catalog.get('//sg/nlb')
        RGovData::Catalog.get('/nlb') # assuming SG is your default_realm
        # get the RGovData::OdataService for the NLB Library dataset
        RGovData::Catalog.get('//sg/nlb/LibrarySet')
        # this also works..
        RGovData::Catalog.get('::sg:nlb:LibrarySet')
        
%h3 Working with Arbitrary Data (not in the catalog)
%p
  RGocData doesn't yet know how to talk to external directories, so the available
  datasets are limited to those already configured in it's internal registry.
%p
  If you have another dataset you want to use, you can do so by directly
  instantiating a RGovData::Service class to suit.
%pre.code
  %code
    = preserve do
      :escaped
        # The minimum requirement is a +uri+ and +type+
        # You may need to add a +credentialset+ if authentication is required
        options = {
          :uri => "http://earthquake.usgs.gov/earthquakes/catalogs/eqs7day-M1.txt",
          :type => :csv
        }

        # Directly create the service endpoint
        service = RGovData::Service.get_instance(options)

        # Now we can use the service to access the dataset
        dataset = service.datasets.first

        # And work with the data:
        puts "This dataset has attributes: \#{dataset.attributes.join(',')}"
        puts "And it has \#{dataset.records.count} rows of data"
